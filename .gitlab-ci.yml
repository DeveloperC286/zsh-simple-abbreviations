stages:
  - clean-git-history-checking
  - conventional-commits-linting
  - conventional-commits-next-version-checking
  - releasing


variables:
  SEMANTIC_VERSIONING_REGEX: "[0-9][0-9]*[.][0-9][0-9]*[.][0-9][0-9]*"
  RELEASE_CLI: "release-cli-linux-amd64"
  GIT_CLIFF_VERSION: "0.6.0"


clean-git-history-checking:
  stage: clean-git-history-checking
  image: rust
  before_script:
    - cargo install clean_git_history
  script:
    # Check all the commits in the branch.
    - /usr/local/cargo/bin/clean_git_history --from-reference "origin/${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}"
  rules:
    - if: $CI_MERGE_REQUEST_ID


conventional-commits-linting:
  stage: conventional-commits-linting
  image: rust
  before_script:
    - cargo install conventional_commits_linter
  script:
    # Lint all the commits in the branch.
    - /usr/local/cargo/bin/conventional_commits_linter --from-reference "origin/${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}" --allow-angular-type-only
  rules:
    - if: $CI_MERGE_REQUEST_ID


conventional-commits-next-version-checking:
  stage: conventional-commits-next-version-checking
  image: rust
  before_script:
    - cargo install conventional_commits_next_version
  script:
    # Get current version.
    - current_version=$(grep "^VERSION" "src/zsh-simple-abbreviations" | cut -d "'" -f 2)
    # Get latest tag.
    - latest_tag=$(git tag --sort=-committerdate | head -1)
    # Check current vs expected.
    - /usr/local/cargo/bin/conventional_commits_next_version --calculation-mode "Batch" --from-reference "${latest_tag}" --from-version "${latest_tag}" --current-version "${current_version}"
  rules:
    - if: $CI_MERGE_REQUEST_ID


releasing:
  stage: releasing
  image: rust
  script:
    # Get current version.
    - current_version=$(grep "^VERSION" "src/zsh-simple-abbreviations" | cut -d "'" -f 2)
    # Check current version is in semantic versioning.
    - echo "${current_version}" | grep -q "^${SEMANTIC_VERSIONING_REGEX}$"
    # If the tag already exist then exit.
    - new_tag=${current_version}
    - git tag -l | grep -q "^${new_tag}$" && exit 0
    # Get latest tag.
    - latest_tag=$(git tag --sort=-committerdate | head -1)
    # Install release description generator.
    - wget "https://github.com/orhun/git-cliff/releases/download/v${GIT_CLIFF_VERSION}/git-cliff-${GIT_CLIFF_VERSION}-x86_64-unknown-linux-musl.tar.gz"
    - tar xzvf "git-cliff-${GIT_CLIFF_VERSION}-x86_64-unknown-linux-musl.tar.gz"
    # Generate the release description.
    - release_description=$(./git-cliff-${GIT_CLIFF_VERSION}/git-cliff "${latest_tag}.." --tag "${new_tag}" --strip all)
    # Install GitlabCI cli releasing tool.
    - wget "https://release-cli-downloads.s3.amazonaws.com/latest/${RELEASE_CLI}"
    - chmod 755 "${RELEASE_CLI}"
    # Create the new release.
    - ./${RELEASE_CLI} create
      --name "${new_tag}"
      --description "${release_description}"
      --tag-name "${new_tag}"
      --ref "${CI_COMMIT_SHA}"
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
