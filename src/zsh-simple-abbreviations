#!/usr/bin/env zsh

KEY_REGEX="-_a-zA-Z0-9"

__zsh_simple_abbreviations::expand() {
		emulate -L zsh -o extended_glob
		local MATCH
		# Can't use KEY_REGEX, but should match it.
		LBUFFER=${LBUFFER%%(#m)[-_a-zA-Z0-9]#}
		# If matches set abbreviation add that else just add what we attempted to match on.
		LBUFFER+=${${_zsh_simple_abbreviations[$MATCH]}:-$MATCH}
		# Causes the syntax highlighting.
		zle self-insert
}

__zsh_simple_abbreviations::insert_space() {
		# Adds a space to the end of the command buffer.
		LBUFFER+=" "
}

if [[ $# -eq 0 ]]; then
		echo "zsh_simple_abbreviations no sub-command or arguments provided."
		return
fi

case $1 in
		--add)
				if [[ $# -ne 3 ]]; then
						echo "zsh_simple_abbreviations add sub-command requires a key and value."
						return
				fi

				local key=${2}
				local value=${3}

				if [[ $(echo "${key}" | grep -E "^[${KEY_REGEX}]*$") ]]; then
						_zsh_simple_abbreviations[$key]="${value}"
				else
						echo "zsh_simple_abbreviations add sub-command key does not match the regex '^[${KEY_REGEX}]*$'."
						return
				fi
		;;
		--version)
				if [[ $# -ne 1 ]]; then
						echo "zsh_simple_abbreviations version sub-command takes no other arguments."
						return
				fi

				echo "${_ZSH_SIMPLE_ABBREVIATIONS_VERSION}"
		;;
		*)
				echo "zsh_simple_abbreviations unrecognised sub-command."
				return
		;;
esac
